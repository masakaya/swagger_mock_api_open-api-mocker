"use strict";
/**
 * OpenAPI 3.0.0 data types format
 * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ranges_1 = require("./ranges");
/** Check if the data is an int32. */
function int32(data) {
    return (Number.isInteger(+data) &&
        ranges_1.INT32_RANGE.max.greaterThanOrEqualTo(data) &&
        ranges_1.INT32_RANGE.min.lessThanOrEqualTo(data));
}
exports.int32 = int32;
/** Check if data is an int64. */
function int64(data) {
    return (Number.isInteger(+data) &&
        ranges_1.INT64_RANGE.max.greaterThanOrEqualTo(data) &&
        ranges_1.INT64_RANGE.min.lessThanOrEqualTo(data));
}
exports.int64 = int64;
/** Check if data is a float. */
function float(data) {
    return (ranges_1.FLOAT_RANGE.max.greaterThanOrEqualTo(data) &&
        ranges_1.FLOAT_RANGE.min.lessThanOrEqualTo(data));
}
exports.float = float;
/** Check if data is a double. */
function double(data) {
    return (ranges_1.DOUBLE_RANGE.max.greaterThanOrEqualTo(data) &&
        ranges_1.DOUBLE_RANGE.min.lessThanOrEqualTo(data));
}
exports.double = double;
/**
 * Check if data is a base64 encoded string.
 * https://github.com/chriso/validator.js/blob/master/src/lib/isBase64.js
 */
function byte(data) {
    const notBase64 = /[^A-Z0-9+/=]/i;
    const len = data.length;
    if (!len || len % 4 !== 0 || notBase64.test(data)) {
        return false;
    }
    const firstPaddingChar = data.indexOf('=');
    return firstPaddingChar === -1 ||
        firstPaddingChar === len - 1 ||
        (firstPaddingChar === len - 2 && data[len - 1] === '=');
}
exports.byte = byte;
